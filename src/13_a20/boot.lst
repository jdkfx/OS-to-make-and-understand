     1                                  ;********************************************
     2                                  ; マクロ
     3                                  ;********************************************
     4                                  %include    "../include/define.s"
     1                              <1>     BOOT_LOAD       equ     0x7C00                  ; ブートプログラムのロード位置
     2                              <1> 
     3                              <1>     BOOT_SIZE       equ     (1024 * 8)              ; ブートコードサイズ
     4                              <1>     SECT_SIZE       equ     (512)                   ; セクタサイズ
     5                              <1>     BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE) ; ブートプログラムのセクタ数
     6                              <1> 
     7                              <1>     E820_RECORD_SIZE    equ     20
     5                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>     .no     resw    1   ; ドライブ番号
    19 00000002 <res 00000002>      <1>     .cyln   resw    1   ; シリンダ
    20 00000004 <res 00000002>      <1>     .head   resw    1   ; ヘッド
    21 00000006 <res 00000002>      <1>     .sect   resw    1   ; セクタ
    22                              <1> endstruc
     6                                  
     7                                          ORG     BOOT_LOAD                       ; ロードアドレスをアセンブラに指示
     8                                  
     9                                  ;********************************************
    10                                  ; エントリポイント
    11                                  ;********************************************
    12                                  entry:
    13                                  
    14                                          ;-----------------------------------
    15                                          ; BPB(BIOS Parameter Block)
    16                                          ;-----------------------------------
    17 00000000 EB58                            jmp     ipl                             ; IPLへジャンプ
    18 00000002 90<rept>                        times   90 - ($ - $$) db 0x90           ;
    19                                  
    20                                          ;-----------------------------------
    21                                          ; IPL(Initial Program Loader)
    22                                          ;-----------------------------------
    23                                  ipl:
    24 0000005A FA                              cli                                     ; // 割り込み禁止
    25                                  
    26 0000005B B80000                          mov     ax, 0x0000                      ; AX = 0x0000;
    27 0000005E 8ED8                            mov     ds, ax                          ; DS = 0x0000;
    28 00000060 8EC0                            mov     es, ax                          ; ES = 0x0000;
    29 00000062 8ED0                            mov     ss, ax                          ; SS = 0x0000;
    30 00000064 BC007C                          mov     sp, BOOT_LOAD                   ; SP = 0x7C00;
    31                                  
    32 00000067 FB                              sti                                     ; // 割り込み許可
    33                                  
    34 00000068 8816[B800]                      mov     [BOOT + drive.no], dl           ; ブートドライブを保存
    35                                  
    36                                          ;-----------------------------------
    37                                          ; 文字列を表示
    38                                          ;-----------------------------------
    39 0000006C 68[9900]E84E0083C4-             cdecl   puts, .s0                       ; puts(.s0);
    39 00000074 02                 
    40                                  
    41                                          ;-----------------------------------
    42                                          ; 残りのセクタをすべて読み込む
    43                                          ;-----------------------------------
    44 00000075 BB0F00                          mov     bx, BOOT_SECT - 1               ; BX = 残りのブートセクタ数
    45 00000078 B9007E                          mov     cx, BOOT_LOAD + SECT_SIZE       ; CX = 次のロードアドレス
    46                                  
    47 0000007B 515368[B800]E89B00-             cdecl   read_chs, BOOT, bx, cx          ; AX = read_chs(.chs, bx, cx);
    47 00000083 83C406             
    48                                  
    49 00000086 39D8                            cmp     ax, bx                          ; if (AX != 残りのセクタ数)
    50 00000088 740C                    .10Q:   jz      .10E                            ; {
    51 0000008A 68[A600]E8300083C4-     .10T:   cdecl   puts, .e0                       ;   puts(.e0);
    51 00000092 02                 
    52 00000093 E84900                          call    reboot                          ;   reboot();
    53                                  .10E:                                           ; }
    54                                  
    55                                          ;-----------------------------------
    56                                          ; 次のステージへ移行
    57                                          ;-----------------------------------
    58 00000096 E95705                          jmp     stage_2                         ; ブート処理の第2ステージ
    59                                  
    60                                          ;-----------------------------------
    61                                          ; データ
    62                                          ;-----------------------------------
    63 00000099 426F6F74696E672E2E-     .s0     db  "Booting...", 0x0A, 0x0D, 0
    63 000000A2 2E0A0D00           
    64 000000A6 4572726F723A736563-     .e0     db  "Error:sector read", 0
    64 000000AF 746F72207265616400 
    65                                  
    66                                  ;********************************************
    67                                  ; ブートドライブに関する情報
    68                                  ;********************************************
    69                                  ALIGN 2, db 0
    70                                  BOOT:                                           ; ブートドライブに関する情報
    71                                          istruc  drive
    72 000000B8 0000                                at  drive.no,       dw 0            ; ドライブ番号
    73 000000BA 0000                                at  drive.cyln,     dw 0            ; C:シリンダ
    74 000000BC 0000                                at  drive.head,     dw 0            ; H:ヘッド
    75 000000BE 0200                                at  drive.sect,     dw 2            ; S:セクタ
    76                                          iend
    77                                  
    78                                  ;********************************************
    79                                  ; モジュール
    80                                  ;********************************************
    81                                  %include    "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1>         ;-------------------------------
     3                              <1>         ;【スタックフレームの構築】
     4                              <1>         ;-------------------------------
     5                              <1>                                         ;   + 4| 出力文字
     6                              <1>                                         ;   + 2| IP(戻り番地)
     7 000000C0 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
     8 000000C1 89E5                <1>         mov     bp, sp                  ;------+---------
     9                              <1> 
    10                              <1>         ;-------------------------------
    11                              <1>         ;【レジスタの保存】
    12                              <1>         ;-------------------------------
    13 000000C3 50                  <1>         push    ax
    14 000000C4 53                  <1>         push    bx
    15 000000C5 56                  <1>         push    si
    16                              <1> 
    17                              <1>         ;-------------------------------
    18                              <1>         ; 引数を取得
    19                              <1>         ;-------------------------------
    20 000000C6 8B7604              <1>         mov     si, [bp + 4]            ; SI = 文字列へのアドレス;
    21                              <1>         
    22                              <1>         ;-------------------------------
    23                              <1>         ;【処理の開始】
    24                              <1>         ;-------------------------------
    25 000000C9 B40E                <1>         mov     ah, 0x0E                ; // テレタイプ式1文字出力
    26 000000CB BB0000              <1>         mov     bx, 0x0000              ; // ページ番号と文字色を0に設定
    27 000000CE FC                  <1>         cld                             ; DF = 0; // アドレス加算
    28                              <1> .10L:                                   ; do
    29                              <1>                                         ; {
    30 000000CF AC                  <1>         lodsb                           ;   AL = *SI++;
    31                              <1>                                         ;
    32 000000D0 3C00                <1>         cmp     al, 0                   ;   if (0 == AI)
    33 000000D2 7404                <1>         je      .10E                    ;       break;
    34                              <1>                                         ;
    35 000000D4 CD10                <1>         int     0x10                    ;   Int10(0x0E, AL); // 文字出力
    36 000000D6 EBF7                <1>         jmp     .10L                    ;
    37                              <1> .10E:                                   ; } while(1);        
    38                              <1>         
    39                              <1>         ;-------------------------------
    40                              <1>         ;【レジスタの復帰】
    41                              <1>         ;-------------------------------
    42 000000D8 5E                  <1>         pop     si
    43 000000D9 5B                  <1>         pop     bx
    44 000000DA 58                  <1>         pop     ax
    45                              <1> 
    46                              <1>         ;-------------------------------
    47                              <1>         ;【スタックフレームの破棄】
    48                              <1>         ;-------------------------------
    49 000000DB 89EC                <1>         mov     sp, bp
    50 000000DD 5D                  <1>         pop     bp
    51                              <1>         
    52 000000DE C3                  <1>         ret
    82                                  %include    "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1>         ;-------------------------------
     3                              <1>         ; メッセージを表示
     4                              <1>         ;-------------------------------
     5 000000DF 68[FB00]E8DBFF83C4- <1>         cdecl   puts, .s0
     5 000000E7 02                  <1>
     6                              <1> 
     7                              <1>         ;-------------------------------
     8                              <1>         ; キー入力待ち
     9                              <1>         ;-------------------------------
    10                              <1> .10L:                                   ; do
    11                              <1>                                         ; {
    12 000000E8 B410                <1>         mov     ah, 0x10                ;   // キー入力待ち
    13 000000EA CD16                <1>         int     0x016                   ;   AL = BIOS(0x16, 0x10);
    14                              <1>                                         ;
    15 000000EC 3C20                <1>         cmp     al, ' '                 ;   ZF = AL == ' ';
    16 000000EE 75F8                <1>         jne     .10L                    ; } while (!ZF);
    17                              <1> 
    18                              <1>         ;-------------------------------
    19                              <1>         ; 改行を出力
    20                              <1>         ;-------------------------------
    21 000000F0 68[1901]E8CAFF83C4- <1>         cdecl   puts, .s1               ; 改行
    21 000000F8 02                  <1>
    22                              <1>         
    23                              <1>         ;-------------------------------
    24                              <1>         ; 再起動
    25                              <1>         ;-------------------------------
    26 000000F9 CD19                <1>         int     0x19                    ; BIOS(0x19);   // reboot()     
    27                              <1>         
    28                              <1>         ;-------------------------------
    29                              <1>         ; 文字列データ
    30                              <1>         ;-------------------------------
    31 000000FB 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    31 00000104 414345206B65792074- <1>
    31 0000010D 6F207265626F6F742E- <1>
    31 00000116 2E2E00              <1>
    32 00000119 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    33                              <1>         
    83                                  %include    "../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1>         ;-------------------------------
     3                              <1>         ;【スタックフレームの構築】
     4                              <1>         ;-------------------------------
     5                              <1>                                         ;   + 8| コピー先
     6                              <1>                                         ;   + 6| セクタ数
     7                              <1>                                         ;   + 4| パラメータバッファ
     8                              <1>                                         ;------+---------
     9                              <1>                                         ;   + 2| IP(戻り番地)
    10 0000011E 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
    11 0000011F 89E5                <1>         mov     bp, sp                  ;------+---------
    12 00000121 6A03                <1>         push    3                       ;   - 2| retry = 3; // リトライ回数
    13 00000123 6A00                <1>         push    0                       ;   - 4| sect  = 0; // 読み込みセクタ数
    14                              <1> 
    15                              <1>         ;-------------------------------
    16                              <1>         ;【レジスタの保存】
    17                              <1>         ;-------------------------------
    18 00000125 53                  <1>         push    bx
    19 00000126 51                  <1>         push    cx
    20 00000127 52                  <1>         push    dx
    21 00000128 06                  <1>         push    es
    22 00000129 56                  <1>         push    si
    23                              <1>         
    24                              <1>         ;-------------------------------
    25                              <1>         ;【処理の開始】
    26                              <1>         ;-------------------------------
    27 0000012A 8B7604              <1>         mov     si, [bp + 4]            ; SI = SRCバッファ;
    28                              <1> 
    29                              <1>         ;-------------------------------
    30                              <1>         ; CXレジスタの設定
    31                              <1>         ; (BIOSコールの呼び出しに適した形に変換)
    32                              <1>         ;-------------------------------
    33 0000012D 8A6C02              <1>         mov     ch, [si + drive.cyln + 0]   ; CH   = シリンダ番号(下位バイト)
    34 00000130 8A4C03              <1>         mov     cl, [si + drive.cyln + 1]   ; CL   = シリンダ番号(上位バイト)
    35 00000133 C0E106              <1>         shl     cl, 6                       ; CL <<= 6; // 最上位2ビットにシフト
    36 00000136 0A4C06              <1>         or      cl, [si + drive.sect]       ; CL  |= セクタ番号;
    37                              <1> 
    38                              <1>         ;-------------------------------
    39                              <1>         ; セクタ読み込み
    40                              <1>         ;-------------------------------
    41 00000139 8A7404              <1>         mov     dh, [si + drive.head]   ; DH = ヘッド番号;
    42 0000013C 8A14                <1>         mov     dl, [si + 0]            ; DL = ドライブ番号;
    43 0000013E B80000              <1>         mov     ax, 0x0000              ; AX = 0x0000;
    44 00000141 8EC0                <1>         mov     es, ax                  ; ES = セグメント
    45 00000143 8B5E08              <1>         mov     bx, [bp + 8]            ; BX = コピー先;
    46                              <1> .10L:                                   ; do
    47                              <1>                                         ; {
    48 00000146 B402                <1>         mov     ah, 0x02                ;   AH = セクタ読み込み
    49 00000148 8A4606              <1>         mov     al, [bp + 6]            ;   AL = セクタ数
    50                              <1>                                         ;
    51 0000014B CD13                <1>         int     0x13                    ;   CF = BIOS(0x13, 0x02);
    52 0000014D 7304                <1>         jnc     .11E                    ;   if (CF)
    53                              <1>                                         ;   {
    54 0000014F B000                <1>         mov     al, 0                   ;     AL = 0;
    55 00000151 EB0C                <1>         jmp     .10E                    ;     break;
    56                              <1> .11E:                                   ;   }
    57                              <1>                                         ;
    58 00000153 3C00                <1>         cmp     al, 0                   ;   if (読み込んだセクタがあれば)
    59 00000155 7508                <1>         jne     .10E                    ;     break;
    60                              <1>                                         ;
    61 00000157 B80000              <1>         mov     ax, 0                   ;   ret = 0; // 戻り値を設定
    62 0000015A FF4EFE              <1>         dec     word [bp - 2]           ; }
    63 0000015D 75E7                <1>         jnz     .10L                    ; while (--retry);
    64                              <1> .10E:
    65 0000015F B400                <1>         mov     ah, 0                   ; AH = 0; // ステータス情報は破棄
    66                              <1> 
    67                              <1>         ;-------------------------------
    68                              <1>         ;【レジスタの復帰】
    69                              <1>         ;-------------------------------
    70 00000161 5E                  <1>         pop     si
    71 00000162 07                  <1>         pop     es
    72 00000163 5A                  <1>         pop     dx
    73 00000164 59                  <1>         pop     cx
    74 00000165 5B                  <1>         pop     bx
    75                              <1> 
    76                              <1>         ;-------------------------------
    77                              <1>         ;【スタックフレームの破棄】
    78                              <1>         ;-------------------------------
    79 00000166 89EC                <1>         mov     sp, bp
    80 00000168 5D                  <1>         pop     bp
    81                              <1>         
    82 00000169 C3                  <1>         ret
    84                                  
    85                                  ;********************************************
    86                                  ; ブートフラグ(先頭512バイトの終了)
    87                                  ;********************************************
    88 0000016A 00<rept>                    times   510 - ($ - $$) db 0x00
    89 000001FE 55AA                        db  0x55, 0xAA
    90                                  
    91                                  ;********************************************
    92                                  ; リアルモード時に取得した情報
    93                                  ;********************************************
    94                                  FONT:                                           ; フォント
    95 00000200 0000                    .seg:   dw 0
    96 00000202 0000                    .off:   dw 0
    97                                  ACPI_DATA:                                      ; ACPI data
    98 00000204 00000000                .adr:   dd 0                                    ; ACPI data address
    99 00000208 00000000                .len:   dd 0                                    ; ACPI data length
   100                                  
   101                                  ;********************************************
   102                                  ; モジュール(先頭512バイト以降に配置)
   103                                  ;********************************************
   104                                  %include    "../modules/real/itoa.s"
     1                              <1> itoa:
     2                              <1>         ;-------------------------------
     3                              <1>         ;【スタックフレームの構築】
     4                              <1>         ;-------------------------------
     5                              <1>                                         ;   +12| フラグ
     6                              <1>                                         ;   +10| 基数
     7                              <1>                                         ;   + 8| バッファサイズ
     8                              <1>                                         ;   + 6| バッファアドレス
     9                              <1>                                         ;   + 4| 数値
    10                              <1>                                         ;   + 2| IP(戻り番地)
    11 0000020C 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
    12 0000020D 89E5                <1>         mov     bp, sp                  ;------+---------
    13                              <1> 
    14                              <1>         ;-------------------------------
    15                              <1>         ;【レジスタの保存】
    16                              <1>         ;-------------------------------
    17 0000020F 50                  <1>         push    ax
    18 00000210 53                  <1>         push    bx
    19 00000211 51                  <1>         push    cx
    20 00000212 52                  <1>         push    dx
    21 00000213 56                  <1>         push    si
    22 00000214 57                  <1>         push    di
    23                              <1> 
    24                              <1>         ;-------------------------------
    25                              <1>         ; 引数を取得
    26                              <1>         ;-------------------------------
    27 00000215 8B4604              <1>         mov     ax, [bp + 4]            ; val   = 数値
    28 00000218 8B7606              <1>         mov     si, [bp + 6]            ; dst   = バッファアドレス;
    29 0000021B 8B4E08              <1>         mov     cx, [bp + 8]            ; size  = 残りのバッファサイズ
    30                              <1> 
    31 0000021E 89F7                <1>         mov     di, si                  ; // バッファの最後尾
    32 00000220 01CF                <1>         add     di, cx                  ; dst   = &dst[size - 1];
    33 00000222 4F                  <1>         dec     di                      ;
    34                              <1> 
    35 00000223 8B5E0C              <1>         mov     bx, word [bp +12]       ; flags = オプション;
    36                              <1> 
    37                              <1>         ;-------------------------------
    38                              <1>         ; 符号付き判定
    39                              <1>         ;-------------------------------
    40 00000226 F7C30100            <1>         test    bx, 0b0001              ; if (flags & 0x01)// 符号付き
    41 0000022A 7408                <1> .10Q:   je      .10E                    ; {
    42 0000022C 83F800              <1>         cmp     ax, 0                   ;   if (val < 0)
    43 0000022F 7D03                <1> .12Q:   jge     .12E                    ;   {
    44 00000231 83CB02              <1>         or      bx, 0b0010              ;      flags |= 2; // 符号表示
    45                              <1> .12E:                                   ;   }
    46                              <1> .10E:                                   ; }
    47                              <1> 
    48                              <1>         ;-------------------------------
    49                              <1>         ; 符号出力判定
    50                              <1>         ;-------------------------------
    51 00000234 F7C30200            <1>         test    bx, 0b0010              ; if (flags & 0x02)// 符号出力判定
    52 00000238 7410                <1> .20Q:   je      .20E                    ; {
    53 0000023A 83F800              <1>         cmp     ax, 0                   ;   if (val < 0)
    54 0000023D 7D07                <1> .22Q:   jge     .22F                    ;   {
    55 0000023F F7D8                <1>         neg     ax                      ;      val *= -1   // 符号反転
    56 00000241 C6042D              <1>         mov     [si], byte '-'          ;      *dst = '-'; // 符号表示
    57 00000244 EB03                <1>         jmp     .22E                    ;   }
    58                              <1> .22F:                                   ;   else
    59                              <1>                                         ;   {
    60 00000246 C6042B              <1>         mov     [si], byte '+'          ;      *dst = '+'; // 符号表示
    61                              <1> .22E:                                   ;   }
    62 00000249 49                  <1>         dec     cx                      ;   size--;        // 残りバッファサイズの減算
    63                              <1> .20E:                                   ; }
    64                              <1> 
    65                              <1>         ;-------------------------------
    66                              <1>         ; ASCII変換
    67                              <1>         ;-------------------------------
    68 0000024A 8B5E0A              <1>         mov     bx, [bp +10]            ; BX = 基数;
    69                              <1> .30L:                                   ; do
    70 0000024D BA0000              <1>         mov     dx, 0                   ; {
    71 00000250 F7F3                <1>         div     bx                      ;
    72                              <1>                                         ;       DX = DX:AX % 基数;
    73                              <1>                                         ;       AX = DX:AX / 基数;
    74                              <1>                                         ;
    75 00000252 89D6                <1>         mov     si, dx                  ;       // テーブル参照
    76 00000254 8A94[7C02]          <1>         mov     dl, byte [.ascii + si]  ;       DL = ASCII[DX];
    77                              <1>                                         ;
    78 00000258 8815                <1>         mov     [di], DL                ;       *dst = DL;
    79 0000025A 4F                  <1>         dec     di                      ;       dst--;
    80                              <1>                                         ;
    81 0000025B 83F800              <1>         cmp     ax, 0                   ;
    82 0000025E E0ED                <1>         loopnz  .30L                    ; } while (AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;-------------------------------
    86                              <1>         ; 空欄を埋める
    87                              <1>         ;-------------------------------
    88 00000260 83F900              <1>         cmp     cx, 0                   ; if (size)
    89 00000263 740D                <1> .40Q:   je      .40E                    ; {
    90 00000265 B020                <1>         mov     al, ' '                 ;   AL = ' '; // ' 'で埋める（デフォルト値）
    91 00000267 837E0C04            <1>         cmp     [bp +12], word 0b0100   ;   if (flags & 0x04)
    92 0000026B 7502                <1> .42Q:   jne     .42E                    ;   {
    93 0000026D B030                <1>         mov     al, '0'                 ;     AL = '0'; // '0'で埋める
    94                              <1> .42E:                                   ;   }
    95 0000026F FD                  <1>         std                             ;   // DF = 1（-方向）
    96 00000270 F3AA                <1>         rep stosb                       ;   while (--CX) *DI-- = ' ';
    97                              <1> .40E:                                   ; }
    98                              <1> 
    99                              <1>         ;-------------------------------
   100                              <1>         ;【レジスタの復帰】
   101                              <1>         ;-------------------------------
   102 00000272 5F                  <1>         pop     di
   103 00000273 5E                  <1>         pop     si
   104 00000274 5A                  <1>         pop     dx
   105 00000275 59                  <1>         pop     cx
   106 00000276 5B                  <1>         pop     bx
   107 00000277 58                  <1>         pop     ax
   108                              <1> 
   109                              <1>         ;-------------------------------
   110                              <1>         ;【スタックフレームの破棄】
   111                              <1>         ;-------------------------------
   112 00000278 89EC                <1>         mov     sp, bp
   113 0000027A 5D                  <1>         pop     bp
   114                              <1>         
   115 0000027B C3                  <1>         ret
   116 0000027C 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"      ; 変換テーブル
   116 00000285 39414243444546      <1>
   105                                  %include    "../modules/real/get_drive_param.s"
     1                              <1> get_drive_param:
     2                              <1>         ;-------------------------------
     3                              <1>         ;【スタックフレームの構築】
     4                              <1>         ;-------------------------------
     5                              <1>                                         ;   + 4| パラメータバッファ
     6                              <1>                                         ;   + 2| IP(戻り番地)
     7 0000028C 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
     8 0000028D 89E5                <1>         mov     bp, sp                  ;------+---------
     9                              <1> 
    10                              <1>         ;-------------------------------
    11                              <1>         ;【レジスタの保存】
    12                              <1>         ;-------------------------------
    13 0000028F 53                  <1>         push    bx
    14 00000290 51                  <1>         push    cx
    15 00000291 06                  <1>         push    es
    16 00000292 56                  <1>         push    si
    17 00000293 57                  <1>         push    di
    18                              <1>         
    19                              <1>         ;-------------------------------
    20                              <1>         ;【処理の開始】
    21                              <1>         ;-------------------------------
    22 00000294 8B7604              <1>         mov     si, [bp + 4]            ; SI = SRCバッファ;
    23                              <1> 
    24 00000297 B80000              <1>         mov     ax, 0                   ; Disk Base Table Pointerの初期化
    25 0000029A 8EC0                <1>         mov     es, ax                  ; ES = 0;
    26 0000029C 89C7                <1>         mov     di, ax                  ; DI = 0;
    27                              <1> 
    28 0000029E B408                <1>         mov     ah, 8                   ; // get drive parameters
    29 000002A0 8A14                <1>         mov     dl, [si + drive.no]     ; DL = ドライブ番号
    30 000002A2 CD13                <1>         int     0x13                    ; CF = BIOS(0x13, 8);
    31 000002A4 721B                <1> .10Q:   jc     .10F                     ; if (0 == CF)
    32                              <1> .10T:                                   ; {
    33 000002A6 88C8                <1>         mov     al, cl                  ;   AX = セクタ数
    34 000002A8 83E03F              <1>         and     ax, 0x3F                ;   // 下位6ビットのみ有効
    35                              <1> 
    36 000002AB C0E906              <1>         shr     cl, 6                   ;   CX = シリンダ数
    37 000002AE C1C908              <1>         ror     cx, 8                   ;
    38 000002B1 41                  <1>         inc     cx                      ;
    39                              <1> 
    40 000002B2 0FB6DE              <1>         movzx   bx, dh                  ;   BX = ヘッド数(1ベース)
    41 000002B5 43                  <1>         inc     bx                      ;
    42                              <1> 
    43 000002B6 894C02              <1>         mov     [si + drive.cyln], cx   ;   drive.cyln = CX; // C:シリンダ数
    44 000002B9 895C04              <1>         mov     [si + drive.head], bx   ;   drive.head = BX; // H:ヘッド数
    45 000002BC 894406              <1>         mov     [si + drive.sect], ax   ;   drive.sect = AX; // S:セクタ数
    46                              <1> 
    47 000002BF EB03                <1>         jmp     .10E                    ; }
    48                              <1> .10F:                                   ; else
    49                              <1>                                         ; {
    50 000002C1 B80000              <1>         mov     ax, 0                   ;   AX = 0; // 失敗
    51                              <1> .10E:                                   ; }
    52                              <1> 
    53                              <1>         ;-------------------------------
    54                              <1>         ;【レジスタの復帰】
    55                              <1>         ;-------------------------------
    56 000002C4 5F                  <1>         pop     di
    57 000002C5 5E                  <1>         pop     si
    58 000002C6 07                  <1>         pop     es
    59 000002C7 59                  <1>         pop     cx
    60 000002C8 5B                  <1>         pop     bx
    61                              <1> 
    62                              <1>         ;-------------------------------
    63                              <1>         ;【スタックフレームの破棄】
    64                              <1>         ;-------------------------------
    65 000002C9 89EC                <1>         mov     sp, bp
    66 000002CB 5D                  <1>         pop     bp
    67                              <1>         
    68 000002CC C3                  <1>         ret
   106                                  %include    "../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1>         ;-------------------------------
     3                              <1>         ;【スタックフレームの構築】
     4                              <1>         ;-------------------------------
     5                              <1>                                         ;   + 4| フォントアドレス格納位置
     6                              <1>                                         ;   + 2| IP(戻り番地)
     7 000002CD 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
     8 000002CE 89E5                <1>         mov     bp, sp                  ;------+---------
     9                              <1> 
    10                              <1>         ;-------------------------------
    11                              <1>         ;【レジスタの保存】
    12                              <1>         ;-------------------------------
    13 000002D0 50                  <1>         push    ax
    14 000002D1 53                  <1>         push    bx
    15 000002D2 56                  <1>         push    si
    16 000002D3 06                  <1>         push    es
    17 000002D4 55                  <1>         push    bp
    18                              <1> 
    19                              <1>         ;-------------------------------
    20                              <1>         ; 引数を取得
    21                              <1>         ;-------------------------------
    22 000002D5 8B7604              <1>         mov     si, [bp + 4]            ; dst = FONTアドレスの保存先;
    23                              <1> 
    24                              <1>         ;-------------------------------
    25                              <1>         ; フォントアドレスの取得
    26                              <1>         ;-------------------------------
    27 000002D8 B83011              <1>         mov     ax, 0x1130              ; // フォントアドレスの取得
    28 000002DB B706                <1>         mov     bh, 0x06                ; 8x16 font (vga/mcga)
    29 000002DD CD10                <1>         int     10h                     ; ES:BP=FONT ADDRESS
    30                              <1> 
    31                              <1>         ;-------------------------------
    32                              <1>         ; FONTアドレスを保存
    33                              <1>         ;-------------------------------
    34 000002DF 8C04                <1>         mov     [si + 0], es            ; dst[0] = セグメント;
    35 000002E1 896C02              <1>         mov     [si + 2], bp            ; dst[1] = オフセット;
    36                              <1> 
    37                              <1>         ;-------------------------------
    38                              <1>         ;【レジスタの復帰】
    39                              <1>         ;-------------------------------
    40 000002E4 5D                  <1>         pop     bp
    41 000002E5 07                  <1>         pop     es
    42 000002E6 5E                  <1>         pop     si
    43 000002E7 5B                  <1>         pop     bx
    44 000002E8 58                  <1>         pop     ax
    45                              <1> 
    46                              <1>         ;-------------------------------
    47                              <1>         ;【スタックフレームの破棄】
    48                              <1>         ;-------------------------------
    49 000002E9 89EC                <1>         mov     sp, bp
    50 000002EB 5D                  <1>         pop     bp
    51                              <1>         
    52 000002EC C3                  <1>         ret
   107                                  %include    "../modules/real/get_mem_info.s"
     1                              <1> get_mem_info:
     2                              <1>         ;-------------------------------
     3                              <1>         ;【レジスタの保存】
     4                              <1>         ;-------------------------------
     5 000002ED 6650                <1>         push    eax
     6 000002EF 6653                <1>         push    ebx
     7 000002F1 6651                <1>         push    ecx
     8 000002F3 6652                <1>         push    edx
     9 000002F5 56                  <1>         push    si
    10 000002F6 57                  <1>         push    di
    11 000002F7 55                  <1>         push    bp
    12                              <1>         
    13                              <1> ALIGN 4, db 0
    14 000002F8 00<rept>            <1> .b0:    times   E820_RECORD_SIZE db 0
    15                              <1> 
    16 0000030C 68[9703]E8AEFD83C4- <1>         cdecl   puts, .s0
    16 00000314 02                  <1>
    17                              <1> 
    18                              <1>         ; メモリ情報を取得する
    19 00000315 BD0000              <1>         mov     bp, 0                   ; lines = 0; // 行数
    20 00000318 66BB00000000        <1>         mov     ebx, 0                  ; index = 0; // インデックスを初期化
    21                              <1> .10L:                                   ; do
    22                              <1>                                         ; {
    23 0000031E 66B820E80000        <1>         mov     eax, 0x0000E820         ;   EAX = 0xE820
    24                              <1>                                         ;   EBX = インデックス
    25 00000324 66B914000000        <1>         mov     ecx, E820_RECORD_SIZE   ;   ECX = 要求バイト数
    26 0000032A 66BA50414D53        <1>         mov     edx, 'PAMS'             ;   EDX = 'SMAP'
    27 00000330 BF[F802]            <1>         mov     di, .b0                 ;   ES : DI = バッファ
    28 00000333 CD15                <1>         int     0x15                    ;   BIOS(0x15, 0xE820);
    29                              <1> 
    30                              <1>         ; コマンドに対応か？
    31 00000335 663D50414D53        <1>         cmp     eax, 'PAMS'             ;   if ('SMAP' != EAX)
    32 0000033B 7402                <1>         je      .12E                    ;   {
    33 0000033D EB4C                <1>         jmp     .10E                    ;     break; // コマンド未対応
    34                              <1> .12E:                                   ;   }
    35                              <1> 
    36                              <1>         ; エラーなし？                   ;   if (CF)
    37 0000033F 7302                <1>         jnc     .14E                    ;   {
    38 00000341 EB48                <1>         jmp     .10E                    ;     break; // エラー発生
    39                              <1> .14E:                                   ;   }
    40                              <1> 
    41                              <1>         ; 1レコード分のメモリ情報を表示
    42 00000343 57E8DB0083C402      <1>         cdecl   put_mem_info, di        ;   1レコード分のメモリ情報を表示
    43                              <1> 
    44                              <1>         ; ACPI dataのアドレスを取得
    45 0000034A 668B4510            <1>         mov     eax, [di + 16]          ;   EAX = レコードタイプ
    46 0000034E 6683F803            <1>         cmp     eax, 3                  ;   if (3 == EAX) // ACPI data
    47 00000352 750F                <1>         jne     .15E                    ;   {
    48                              <1>                                         ;
    49 00000354 668B05              <1>         mov     eax, [di + 0]           ;     EAX = BASEアドレス
    50 00000357 66A3[0402]          <1>         mov     [ACPI_DATA.adr], eax    ;     ACPI_DATA.adr = EAX;
    51                              <1>                                         ;
    52 0000035B 668B4508            <1>         mov     eax, [di + 8]           ;     EAX = Length;
    53 0000035F 66A3[0802]          <1>         mov     [ACPI_DATA.len], eax    ;     ACPI_DATA.len = EAX;
    54                              <1> .15E:                                   ;   }
    55                              <1> 
    56 00000363 6683FB00            <1>         cmp     ebx, 0                  ;   if (0 != EBX)
    57 00000367 741C                <1>         jz      .16E                    ;   {
    58                              <1>                                         ;
    59 00000369 45                  <1>         inc     bp                      ;     lines++;
    60 0000036A 83E507              <1>         and     bp, 0x07                ;     lines &= 0x07;
    61 0000036D 7516                <1>         jnz     .16E                    ;     if (0 == lines)
    62                              <1>                                         ;     {
    63 0000036F 68[0A04]E84BFD83C4- <1>         cdecl   puts, .s2               ;       // 中断メッセージを表示
    63 00000377 02                  <1>
    64                              <1>                                         ;
    65 00000378 B410                <1>         mov     ah, 0x10                ;　　　　// キー入力待ち
    66 0000037A CD16                <1>         int     0x16                    ;       AL = BIOS(0x16, 0x10);
    67                              <1>                                         ;
    68 0000037C 68[1504]E83EFD83C4- <1>         cdecl   puts, .s3               ;       // 中断メッセージを表示
    68 00000384 02                  <1>
    69                              <1>                                         ;     }
    70                              <1> .16E:                                   ;   }
    71                              <1> 
    72 00000385 6683FB00            <1>         cmp     ebx, 0                  ;
    73 00000389 7593                <1>         jne     .10L                    ; }
    74                              <1> .10E:                                   ; while (0 == EBX);
    75                              <1> 
    76                              <1>         ;-------------------------------
    77                              <1>         ;【レジスタの復帰】
    78                              <1>         ;-------------------------------
    79 0000038B 5D                  <1>         pop     bp
    80 0000038C 5F                  <1>         pop     di
    81 0000038D 5E                  <1>         pop     si
    82 0000038E 665A                <1>         pop     edx
    83 00000390 6659                <1>         pop     ecx
    84 00000392 665B                <1>         pop     ebx
    85 00000394 6658                <1>         pop     eax
    86                              <1> 
    87 00000396 C3                  <1>         ret
    88                              <1> 
    89                              <1>         ;-------------------------------
    90                              <1>         ; データ
    91                              <1>         ;-------------------------------
    92 00000397 2045383230204D656D- <1> .s0:	db " E820 Memory Map:", 0x0A, 0x0D
    92 000003A0 6F7279204D61703A0A- <1>
    92 000003A9 0D                  <1>
    93 000003AA 20426173655F5F5F5F- <1> 	    db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
    93 000003B3 5F5F5F5F5F5F5F5F5F- <1>
    93 000003BC 204C656E6774685F5F- <1>
    93 000003C5 5F5F5F5F5F5F5F5F5F- <1>
    93 000003CE 20547970655F5F5F5F- <1>
    93 000003D7 0A0D00              <1>
    94 000003DA 202D2D2D2D2D2D2D2D- <1> .s1:	db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
    94 000003E3 2D2D2D2D2D2D2D2D2D- <1>
    94 000003EC 202D2D2D2D2D2D2D2D- <1>
    94 000003F5 2D2D2D2D2D2D2D2D2D- <1>
    94 000003FE 202D2D2D2D2D2D2D2D- <1>
    94 00000407 0A0D00              <1>
    95 0000040A 203C6D6F72652E2E2E- <1> .s2:    db " <more...>", 0
    95 00000413 3E00                <1>
    96 00000415 0D2020202020202020- <1> .s3:    db 0x0D, "          ", 0x0D, 0
    96 0000041E 20200D00            <1>
    97                              <1> 
    98                              <1> put_mem_info:
    99                              <1>         ;-------------------------------
   100                              <1>         ;【スタックフレームの構築】
   101                              <1>         ;-------------------------------
   102                              <1>                                         ;   + 4| バッファアドレス
   103                              <1>                                         ;   + 2| IP(戻り番地)
   104 00000422 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
   105 00000423 89E5                <1>         mov     bp, sp                  ;------+---------
   106                              <1> 
   107                              <1>         ;-------------------------------
   108                              <1>         ;【レジスタの保存】
   109                              <1>         ;-------------------------------
   110 00000425 53                  <1>         push    bx
   111 00000426 56                  <1>         push    si
   112                              <1> 
   113                              <1>         ;-------------------------------
   114                              <1>         ; 引数を取得
   115                              <1>         ;-------------------------------
   116 00000427 8B7604              <1>         mov     si, [bp + 4]            ; SI = バッファアドレス;
   117                              <1> 
   118                              <1>         ;-----------------------------------------
   119                              <1>         ; レコードの表示
   120                              <1>         ;-----------------------------------------
   121                              <1>         ; Base(64bit)
   122 0000042A 6A046A106A0468-     <1>         cdecl   itoa, word[si + 6], .p2 + 0, 4, 16, 0b0100
   122 00000431 [0105]FF7406E8D3FD- <1>
   122 00000439 83C40A              <1>
   123 0000043C 6A046A106A0468-     <1>         cdecl   itoa, word[si + 4], .p2 + 4, 4, 16, 0b0100
   123 00000443 [0505]FF7404E8C1FD- <1>
   123 0000044B 83C40A              <1>
   124 0000044E 6A046A106A0468-     <1>         cdecl   itoa, word[si + 2], .p3 + 0, 4, 16, 0b0100
   124 00000455 [0A05]FF7402E8AFFD- <1>
   124 0000045D 83C40A              <1>
   125 00000460 6A046A106A0468-     <1>         cdecl   itoa, word[si + 0], .p3 + 4, 4, 16, 0b0100
   125 00000467 [0E05]FF34E89EFD83- <1>
   125 0000046F C40A                <1>
   126                              <1> 
   127                              <1>         ; Length(64bit)
   128 00000471 6A046A106A0468-     <1>         cdecl   itoa, word[si + 14], .p4 + 0, 4, 16, 0b0100
   128 00000478 [1305]FF740EE88CFD- <1>
   128 00000480 83C40A              <1>
   129 00000483 6A046A106A0468-     <1>         cdecl   itoa, word[si + 12], .p4 + 4, 4, 16, 0b0100
   129 0000048A [1705]FF740CE87AFD- <1>
   129 00000492 83C40A              <1>
   130 00000495 6A046A106A0468-     <1>         cdecl   itoa, word[si + 10], .p5 + 0, 4, 16, 0b0100
   130 0000049C [1C05]FF740AE868FD- <1>
   130 000004A4 83C40A              <1>
   131 000004A7 6A046A106A0468-     <1>         cdecl   itoa, word[si + 8], .p5 + 4, 4, 16, 0b0100
   131 000004AE [2005]FF7408E856FD- <1>
   131 000004B6 83C40A              <1>
   132                              <1> 
   133                              <1>         ; Type(32bit)
   134 000004B9 6A046A106A0468-     <1>         cdecl   itoa, word[si + 18], .p6 + 0, 4, 16, 0b0100
   134 000004C0 [2505]FF7412E844FD- <1>
   134 000004C8 83C40A              <1>
   135 000004CB 6A046A106A0468-     <1>         cdecl   itoa, word[si + 16], .p6 + 4, 4, 16, 0b0100
   135 000004D2 [2905]FF7410E832FD- <1>
   135 000004DA 83C40A              <1>
   136                              <1> 
   137 000004DD 68[0005]E8DDFB83C4- <1>         cdecl   puts, .s1
   137 000004E5 02                  <1>
   138                              <1> 
   139 000004E6 8B5C10              <1>         mov     bx, [si + 16]           ; // タイプを文字列で表示
   140 000004E9 83E307              <1>         and     bx, 0x07                ; BX = Type(0~5)
   141 000004EC D1E3                <1>         shl     bx, 1                   ; BX *= 2; // 要素サイズに変換
   142 000004EE 81C3[8205]          <1>         add     bx, .t0                 ; BX += .t0; // テーブルの先頭アドレスを加算
   143 000004F2 FF37E8C9FB83C402    <1>         cdecl   puts, word[bx]          ; puts(*BX);
   144                              <1> 
   145                              <1>         ;-------------------------------
   146                              <1>         ;【レジスタの復帰】
   147                              <1>         ;-------------------------------
   148 000004FA 5E                  <1>         pop     si
   149 000004FB 5B                  <1>         pop     bx
   150                              <1> 
   151                              <1>         ;-------------------------------
   152                              <1>         ;【スタックフレームの破棄】
   153                              <1>         ;-------------------------------
   154 000004FC 89EC                <1>         mov     sp, bp
   155 000004FE 5D                  <1>         pop     bp
   156                              <1>         
   157 000004FF C3                  <1>         ret;
   158                              <1> 
   159                              <1>         ;-------------------------------
   160                              <1>         ; データ
   161                              <1>         ;-------------------------------
   162 00000500 20                  <1> .s1:    db " "
   163 00000501 5A5A5A5A5A5A5A5A5F  <1> .p2:    db "ZZZZZZZZ_"
   164 0000050A 5A5A5A5A5A5A5A5A20  <1> .p3:    db "ZZZZZZZZ "
   165 00000513 5A5A5A5A5A5A5A5A5F  <1> .p4:    db "ZZZZZZZZ_"
   166 0000051C 5A5A5A5A5A5A5A5A20  <1> .p5:    db "ZZZZZZZZ "
   167 00000525 5A5A5A5A5A5A5A5A00  <1> .p6:    db "ZZZZZZZZ", 0
   168                              <1> 
   169 0000052E 2028556E6B6E6F776E- <1> .s4:    db " (Unknown)", 0x0A, 0x0D, 0
   169 00000537 290A0D00            <1>
   170 0000053B 2028757361626C6529- <1> .s5:    db " (usable)", 0x0A, 0x0D, 0
   170 00000544 0A0D00              <1>
   171 00000547 202872657365727665- <1> .s6:    db " (reserved)", 0x0A, 0x0D, 0
   171 00000550 64290A0D00          <1>
   172 00000555 202841435049206461- <1> .s7:    db " (ACPI data)", 0x0A, 0x0D, 0
   172 0000055E 7461290A0D00        <1>
   173 00000564 202841435049204E56- <1> .s8:    db " (ACPI NVS)", 0x0A, 0x0D, 0
   173 0000056D 53290A0D00          <1>
   174 00000572 2028626164206D656D- <1> .s9:    db " (bad memory)", 0x0A, 0x0D, 0
   174 0000057B 6F7279290A0D00      <1>
   175                              <1> 
   176 00000582 [2E05][3B05][4705]- <1> .t0: dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   176 00000588 [5505][6405][7205]- <1>
   176 0000058E [2E05][2E05]        <1>
   108                                  %include    "../modules/real/kbc.s"
     1                              <1> KBC_Data_Write:
     2                              <1>         ;-------------------------------
     3                              <1>         ;【スタックフレームの構築】
     4                              <1>         ;-------------------------------
     5                              <1>                                         ;   + 4| データ
     6                              <1>                                         ;   + 2| IP(戻り番地)
     7 00000592 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
     8 00000593 89E5                <1>         mov     bp, sp                  ;------+---------
     9                              <1> 
    10                              <1>         ;-------------------------------
    11                              <1>         ;【レジスタの保存】
    12                              <1>         ;-------------------------------
    13 00000595 51                  <1>         push    cx
    14                              <1>         
    15                              <1>         ;-------------------------------
    16                              <1>         ; 書き込み処理
    17                              <1>         ;-------------------------------
    18 00000596 B90000              <1>         mov     cx, 0                   ; CX = 0; // 最大カウント数
    19                              <1> .10L:                                   ; do
    20                              <1>                                         ; {
    21 00000599 E464                <1>         in      al, 0x64                ;   AL = inp(0x64); // KBCステータス
    22 0000059B A802                <1>         test    al, 0x02                ;   ZF = AL & 0x02; // 書き込み可能？
    23 0000059D E0FA                <1>         loopnz  .10L                    ; } while (--cx && !ZF);
    24                              <1> 
    25 0000059F 83F900              <1>         cmp     cx, 0                   ; if (CX) // 未タイムアウト
    26 000005A2 7405                <1>         jz      .20E                    ; {
    27                              <1>                                         ;
    28 000005A4 8A4604              <1>         mov     al, [bp + 4]            ;   AL = データ;
    29 000005A7 E660                <1>         out     0x60, al                ;   outp(0x60, AL);
    30                              <1> .20E:                                   ; }
    31 000005A9 89C8                <1>         mov     ax, cx                  ; return CX;
    32                              <1> 
    33                              <1>         ;-------------------------------
    34                              <1>         ;【レジスタの復帰】
    35                              <1>         ;-------------------------------
    36 000005AB 59                  <1>         pop     cx
    37                              <1> 
    38                              <1>         ;-------------------------------
    39                              <1>         ;【スタックフレームの破棄】
    40                              <1>         ;-------------------------------
    41 000005AC 89EC                <1>         mov     sp, bp
    42 000005AE 5D                  <1>         pop     bp
    43                              <1>         
    44 000005AF C3                  <1>         ret
    45                              <1> 
    46                              <1> KBC_Data_Read:
    47                              <1>         ;-------------------------------
    48                              <1>         ;【スタックフレームの構築】
    49                              <1>         ;-------------------------------
    50                              <1>                                         ;   + 4| データ
    51                              <1>                                         ;   + 2| IP(戻り番地)
    52 000005B0 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
    53 000005B1 89E5                <1>         mov     bp, sp                  ;------+---------
    54                              <1> 
    55                              <1>         ;-------------------------------
    56                              <1>         ;【レジスタの保存】
    57                              <1>         ;-------------------------------
    58 000005B3 51                  <1>         push    cx
    59                              <1>         
    60                              <1>         ;-------------------------------
    61                              <1>         ; 読み込み処理
    62                              <1>         ;-------------------------------
    63 000005B4 B90000              <1>         mov     cx, 0                   ; CX = 0; // 最大カウント数
    64                              <1> .10L:                                   ; do
    65                              <1>                                         ; {
    66 000005B7 E464                <1>         in      al, 0x64                ;   AL = inp(0x64); // KBCステータス
    67 000005B9 A801                <1>         test    al, 0x01                ;   ZF = AL & 0x01; // 読み込み可能？
    68 000005BB E0FA                <1>         loopnz  .10L                    ; } while (--cx && !ZF);
    69                              <1> 
    70 000005BD 83F900              <1>         cmp     cx, 0                   ; if (CX) // 未タイムアウト
    71 000005C0 7409                <1>         jz      .20E                    ; {
    72                              <1>                                         ;
    73 000005C2 B400                <1>         mov     ah, 0x00                ;   AH = 0x00;
    74 000005C4 E460                <1>         in      al, 0x60                ;   AL = inp(0x60); // データ取得
    75                              <1>                                         ;
    76 000005C6 8B7E04              <1>         mov     di, [bp + 4]            ;   DI = ptr;
    77 000005C9 8905                <1>         mov     [di + 0], ax            ;   DI[0] = AX;
    78                              <1> .20E:                                   ; }
    79 000005CB 89C8                <1>         mov     ax, cx                  ; return CX;
    80                              <1> 
    81                              <1>         ;-------------------------------
    82                              <1>         ;【レジスタの復帰】
    83                              <1>         ;-------------------------------
    84 000005CD 59                  <1>         pop     cx
    85                              <1> 
    86                              <1>         ;-------------------------------
    87                              <1>         ;【スタックフレームの破棄】
    88                              <1>         ;-------------------------------
    89 000005CE 89EC                <1>         mov     sp, bp
    90 000005D0 5D                  <1>         pop     bp
    91                              <1>         
    92 000005D1 C3                  <1>         ret
    93                              <1> 
    94                              <1> KBC_Cmd_Write:
    95                              <1>         ;-------------------------------
    96                              <1>         ;【スタックフレームの構築】
    97                              <1>         ;-------------------------------
    98                              <1>                                         ;   + 4| データ
    99                              <1>                                         ;   + 2| IP(戻り番地)
   100 000005D2 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
   101 000005D3 89E5                <1>         mov     bp, sp                  ;------+---------
   102                              <1> 
   103                              <1>         ;-------------------------------
   104                              <1>         ;【レジスタの保存】
   105                              <1>         ;-------------------------------
   106 000005D5 51                  <1>         push    cx
   107                              <1>         
   108                              <1>         ;-------------------------------
   109                              <1>         ; コマンド書き込み
   110                              <1>         ;-------------------------------
   111 000005D6 B90000              <1>         mov     cx, 0                   ; CX = 0; // 最大カウント数
   112                              <1> .10L:                                   ; do
   113                              <1>                                         ; {
   114 000005D9 E464                <1>         in      al, 0x64                ;   AL = inp(0x64); // KBCステータス
   115 000005DB A801                <1>         test    al, 0x01                ;   ZF = AL & 0x01; // 読み込み可能？
   116 000005DD E0FA                <1>         loopnz  .10L                    ; } while (--cx && !ZF);
   117                              <1> 
   118 000005DF 83F900              <1>         cmp     cx, 0                   ; if (CX) // 未タイムアウト
   119 000005E2 7405                <1>         jz      .20E                    ; {
   120                              <1>                                         ;
   121 000005E4 8A4604              <1>         mov     al, [bp + 4]            ;   AL = コマンド;
   122 000005E7 E664                <1>         out     0x64, al                ;   outp(0x64, AL);
   123                              <1> .20E:                                   ; }
   124 000005E9 89C8                <1>         mov     ax, cx                  ; return CX;
   125                              <1> 
   126                              <1>         ;-------------------------------
   127                              <1>         ;【レジスタの復帰】
   128                              <1>         ;-------------------------------
   129 000005EB 59                  <1>         pop     cx
   130                              <1> 
   131                              <1>         ;-------------------------------
   132                              <1>         ;【スタックフレームの破棄】
   133                              <1>         ;-------------------------------
   134 000005EC 89EC                <1>         mov     sp, bp
   135 000005EE 5D                  <1>         pop     bp
   136                              <1>         
   137 000005EF C3                  <1>         ret
   109                                  
   110                                  ;********************************************
   111                                  ; ブート処理の第2ステージ
   112                                  ;********************************************
   113                                  stage_2:
   114                                          ;-----------------------------------
   115                                          ; 文字列を表示
   116                                          ;-----------------------------------
   117 000005F0 68[6A06]E8CAFA83C4-             cdecl   puts,   .s0                     ; puts(.s0);
   117 000005F8 02                 
   118                                  
   119                                          ;-----------------------------------
   120                                          ; ドライブ情報を取得
   121                                          ;-----------------------------------
   122 000005F9 68[B800]E88DFC83C4-             cdecl   get_drive_param, BOOT           ; get_drive_param(DX, BOOT.CYLN);
   122 00000601 02                 
   123 00000602 83F800                          cmp     ax, 0                           ; if (0 == AX)
   124 00000605 750C                    .10Q:   jne     .10E                            ; {
   125 00000607 68[A106]E8B3FA83C4-     .10T:   cdecl   puts, .e0                       ;   puts(.e0);
   125 0000060F 02                 
   126 00000610 E8CCFA                          call    reboot                          ;   reboot(); // 再起動
   127                                  .10E:                                           ; }
   128                                  
   129                                          ;-----------------------------------
   130                                          ; ドライブ情報を表示
   131                                          ;-----------------------------------
   132 00000613 A1[B800]                        mov     ax, [BOOT + drive.no]           ; AX = ブートドライブ;
   133 00000616 6A046A106A0268-                 cdecl   itoa, ax, .p1, 2, 16, 0b0100    ;
   133 0000061D [8206]50E8E9FB83C4-
   133 00000625 0A                 
   134 00000626 A1[BA00]                        mov     ax, [BOOT + drive.cyln]         ;
   135 00000629 6A046A106A0468-                 cdecl   itoa, ax, .p2, 4, 16, 0b0100    ;
   135 00000630 [8A06]50E8D6FB83C4-
   135 00000638 0A                 
   136 00000639 A1[BC00]                        mov     ax, [BOOT + drive.head]         ; AX = ヘッド数;
   137 0000063C 6A046A106A0268-                 cdecl   itoa, ax, .p3, 2, 16, 0b0100    ;
   137 00000643 [9406]50E8C3FB83C4-
   137 0000064B 0A                 
   138 0000064C A1[BE00]                        mov     ax, [BOOT + drive.sect]         ; AX = トラックあたりのセクタ数;
   139 0000064F 6A046A106A0268-                 cdecl   itoa, ax, .p4, 2, 16, 0b0100    ;
   139 00000656 [9C06]50E8B0FB83C4-
   139 0000065E 0A                 
   140 0000065F 68[7906]E85BFA83C4-             cdecl   puts, .s1
   140 00000667 02                 
   141                                  
   142                                          ;-----------------------------------
   143                                          ; 次のステージへ移行
   144                                          ;-----------------------------------
   145 00000668 EB52                            jmp     stage_3rd                       ; ブート処理の第3ステージ
   146                                  
   147                                          ;-----------------------------------
   148                                          ; データ
   149                                          ;-----------------------------------
   150 0000066A 326E64207374616765-     .s0     db  "2nd stage...", 0x0A, 0x0D, 0
   150 00000673 2E2E2E0A0D00       
   151                                  
   152 00000679 2044726976653A3078      .s1     db " Drive:0x"
   153 00000682 20202C20433A3078        .p1     db "  , C:0x"
   154 0000068A 202020202C20483A30-     .p2     db "    , H:0x"
   154 00000693 78                 
   155 00000694 20202C20533A3078        .p3     db "  , S:0x"
   156 0000069C 20200A0D00              .p4     db "  ", 0x0A, 0x0D, 0
   157                                  
   158 000006A1 43616E277420676574-     .e0     db "Can't get drive parameter.", 0
   158 000006AA 206472697665207061-
   158 000006B3 72616D657465722E00 
   159                                  
   160                                  ;********************************************
   161                                  ; ブート処理の第3ステージ
   162                                  ;********************************************
   163                                  stage_3rd:
   164                                          ;-----------------------------------
   165                                          ; 文字列を表示
   166                                          ;-----------------------------------
   167 000006BC 68[3F07]E8FEF983C4-             cdecl   puts,   .s0                     ; puts(.s0);
   167 000006C4 02                 
   168                                  
   169                                          ;-----------------------------------
   170                                          ; プロテクトモードで使用するフォントは、
   171                                          ; BIOSに内蔵されたものを流用する
   172                                          ;-----------------------------------
   173 000006C5 68[0002]E802FC83C4-             cdecl   get_font_adr, FONT              ; // BIOSのフォントアドレスを取得
   173 000006CD 02                 
   174                                  
   175                                          ;-----------------------------------
   176                                          ; フォントアドレスの表示
   177                                          ;-----------------------------------
   178 000006CE 6A046A106A0468-                 cdecl   itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   178 000006D5 [5C07]FF36[0002]E8-
   178 000006DC 2EFB83C40A         
   179 000006E1 6A046A106A0468-                 cdecl   itoa, word [FONT.off], .p2, 4, 16, 0b0100
   179 000006E8 [6107]FF36[0202]E8-
   179 000006EF 1BFB83C40A         
   180 000006F4 68[4E07]E8C6F983C4-             cdecl   puts, .s1
   180 000006FC 02                 
   181                                  
   182                                          ;-----------------------------------
   183                                          ; メモリー情報の取得と表示
   184                                          ;-----------------------------------
   185 000006FD 68[0402]E8EAFB83C4-             cdecl   get_mem_info, ACPI_DATA         ; get_mem_info(&ACPI_DATA);
   185 00000705 02                 
   186                                  
   187 00000706 66A1[0402]                      mov     eax, [ACPI_DATA.adr]            ; EAX = ACPI_DATA.adr;
   188 0000070A 6683F800                        cmp     eax, 0                          ; if (EAX)
   189 0000070E 742D                            je      .10E                            ; {
   190                                          
   191 00000710 6A046A106A0468-                 cdecl   itoa, ax, .p4, 4, 16, 0b0100    ;   itoa(AX); // 下位アドレスを変換
   191 00000717 [7A07]50E8EFFA83C4-
   191 0000071F 0A                 
   192 00000720 66C1E810                        shr     eax, 16                         ;   EAX >>= 16;
   193 00000724 6A046A106A0468-                 cdecl   itoa, ax, .p3, 4, 16, 0b0100    ;   itoa(AX); // 上位アドレスを変換
   193 0000072B [7607]50E8DBFA83C4-
   193 00000733 0A                 
   194 00000734 68[6B07]E886F983C4-             cdecl   puts, .s2                       ;   puts(.s2); // アドレスを表示
   194 0000073C 02                 
   195                                  .10E:                                           ; }
   196                                  
   197                                          ;-----------------------------------
   198                                          ; 次のステージへ移行
   199                                          ;-----------------------------------
   200 0000073D EB42                            jmp     stage_4                         ; ブート処理の第4ステージ
   201                                  
   202                                          ;-----------------------------------
   203                                          ; データ
   204                                          ;-----------------------------------
   205 0000073F 337264207374616765-     .s0     db  "3rd stage...", 0x0A, 0x0D, 0
   205 00000748 2E2E2E0A0D00       
   206                                  
   207 0000074E 20466F6E7420416464-     .s1     db " Font Address="
   207 00000757 726573733D         
   208 0000075C 5A5A5A5A3A              .p1     db "ZZZZ:"
   209 00000761 5A5A5A5A0A0D00          .p2     db "ZZZZ", 0x0A, 0x0D, 0
   210 00000768 0A0D00                          db 0x0A, 0x0D, 0
   211                                  
   212 0000076B 204143504920646174-     .s2     db " ACPI data="
   212 00000774 613D               
   213 00000776 5A5A5A5A                .p3     db "ZZZZ"
   214 0000077A 5A5A5A5A0A0D00          .p4     db "ZZZZ", 0x0A, 0x0D, 0
   215                                  
   216                                  ;********************************************
   217                                  ; ブート処理の第4ステージ
   218                                  ;********************************************
   219                                  stage_4:
   220                                          ;-----------------------------------
   221                                          ; 文字列を表示
   222                                          ;-----------------------------------
   223 00000781 68[D207]E839F983C4-             cdecl   puts,   .s0
   223 00000789 02                 
   224                                  
   225                                          ;-----------------------------------
   226                                          ; A20ゲートの有効化
   227                                          ;-----------------------------------
   228 0000078A FA                              cli                                     ; // 割り込み禁止
   229                                                                                  ;
   230 0000078B 68AD00E841FE83C402              cdecl   KBC_Cmd_Write, 0xAD             ; // キーボード有効化
   231                                                                                  ;
   232 00000794 68D000E838FE83C402              cdecl   KBC_Cmd_Write, 0xD0             ; // 出力ポート読み出しコマンド
   233 0000079D 68[F607]E80DFE83C4-             cdecl   KBC_Data_Read, .key             ; // 出力ポートデータ
   233 000007A5 02                 
   234                                                                                  ;
   235 000007A6 8A1E[F607]                      mov     bl, [.key]                      ; BL = key;
   236 000007AA 80CB02                          or      bl, 0x02                        ; BL != 0x02; // A20ゲートの有効化
   237                                                                                  ;
   238 000007AD 68D100E81FFE83C402              cdecl   KBC_Cmd_Write, 0xD1             ; // 出力ポート書き込みコマンド
   239 000007B6 53E8D8FD83C402                  cdecl   KBC_Data_Write, bx              ; // 出力ポートデータ
   240                                                                                  ;
   241 000007BD 68AE00E80FFE83C402              cdecl   KBC_Cmd_Write, 0xAE             ; // キーボード有効化
   242                                                                                  ;
   243 000007C6 FB                              sti                                     ; // 割り込み許可
   244                                  
   245                                          ;-----------------------------------
   246                                          ; 文字列を表示
   247                                          ;-----------------------------------
   248 000007C7 68[E107]E8F3F883C4-             cdecl   puts, .s1
   248 000007CF 02                 
   249                                  
   250                                          ;-----------------------------------
   251                                          ; 処理の終了
   252                                          ;-----------------------------------
   253 000007D0 EBFE                            jmp     $                               ; while (1) ; // 無限ループ
   254                                  
   255                                          ;-----------------------------------
   256                                          ; データ
   257                                          ;-----------------------------------
   258 000007D2 347468207374616765-     .s0     db  "4th stage...", 0x0A, 0x0D, 0
   258 000007DB 2E2E2E0A0D00       
   259 000007E1 204132302047617465-     .s1     db  " A20 Gate Enabled.", 0x0A, 0x0D, 0
   259 000007EA 20456E61626C65642E-
   259 000007F3 0A0D00             
   260                                  
   261 000007F6 0000                    .key:   dw  0
   262                                  
   263                                  ;********************************************
   264                                  ; パディング
   265                                  ;********************************************
   266 000007F8 00<rept>                        times BOOT_SIZE - ($ - $$)     db  0   ; パディング
