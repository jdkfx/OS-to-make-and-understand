     1                                  ;********************************************
     2                                  ; マクロ
     3                                  ;********************************************
     4                                  %include    "../include/define.s"
     1                              <1>     BOOT_LOAD       equ     0x7C00                  ; ブートプログラムのロード位置
     2                              <1> 
     3                              <1>     BOOT_SIZE       equ     (1024 * 8)              ; ブートコードサイズ
     4                              <1>     SECT_SIZE       equ     (512)                   ; セクタサイズ
     5                              <1>     BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE) ; ブートプログラムのセクタ数
     5                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>     .no     resw    1   ; ドライブ番号
    19 00000002 <res 00000002>      <1>     .cyln   resw    1   ; シリンダ
    20 00000004 <res 00000002>      <1>     .head   resw    1   ; ヘッド
    21 00000006 <res 00000002>      <1>     .sect   resw    1   ; セクタ
    22                              <1> endstruc
     6                                  
     7                                          ORG     BOOT_LOAD                       ; ロードアドレスをアセンブラに指示
     8                                  
     9                                  ;********************************************
    10                                  ; エントリポイント
    11                                  ;********************************************
    12                                  entry:
    13                                  
    14                                          ;-----------------------------------
    15                                          ; BPB(BIOS Parameter Block)
    16                                          ;-----------------------------------
    17 00000000 EB58                            jmp     ipl                             ; IPLへジャンプ
    18 00000002 90<rept>                        times   90 - ($ - $$) db 0x90           ;
    19                                  
    20                                          ;-----------------------------------
    21                                          ; IPL(Initial Program Loader)
    22                                          ;-----------------------------------
    23                                  ipl:
    24 0000005A FA                              cli                                     ; // 割り込み禁止
    25                                  
    26 0000005B B80000                          mov     ax, 0x0000                      ; AX = 0x0000;
    27 0000005E 8ED8                            mov     ds, ax                          ; DS = 0x0000;
    28 00000060 8EC0                            mov     es, ax                          ; ES = 0x0000;
    29 00000062 8ED0                            mov     ss, ax                          ; SS = 0x0000;
    30 00000064 BC007C                          mov     sp, BOOT_LOAD                   ; SP = 0x7C00;
    31                                  
    32 00000067 FB                              sti                                     ; // 割り込み許可
    33                                  
    34 00000068 8816[B800]                      mov     [BOOT + drive.no], dl           ; ブートドライブを保存
    35                                  
    36                                          ;-----------------------------------
    37                                          ; 文字列を表示
    38                                          ;-----------------------------------
    39 0000006C 68[9900]E84E0083C4-             cdecl   puts, .s0                       ; puts(.s0);
    39 00000074 02                 
    40                                  
    41                                          ;-----------------------------------
    42                                          ; 残りのセクタをすべて読み込む
    43                                          ;-----------------------------------
    44 00000075 BB0F00                          mov     bx, BOOT_SECT - 1               ; BX = 残りのブートセクタ数
    45 00000078 B9007E                          mov     cx, BOOT_LOAD + SECT_SIZE       ; CX = 次のロードアドレス
    46                                  
    47 0000007B 515368[B800]E89B00-             cdecl   read_chs, BOOT, bx, cx          ; AX = read_chs(.chs, bx, cx);
    47 00000083 83C406             
    48                                  
    49 00000086 39D8                            cmp     ax, bx                          ; if (AX != 残りのセクタ数)
    50 00000088 740C                    .10Q:   jz      .10E                            ; {
    51 0000008A 68[A600]E8300083C4-     .10T:   cdecl   puts, .e0                       ;   puts(.e0);
    51 00000092 02                 
    52 00000093 E84900                          call    reboot                          ;   reboot();
    53                                  .10E:                                           ; }
    54                                  
    55                                          ;-----------------------------------
    56                                          ; 次のステージへ移行
    57                                          ;-----------------------------------
    58 00000096 E94C02                          jmp     stage_2                         ; ブート処理の第2ステージ
    59                                  
    60                                          ;-----------------------------------
    61                                          ; データ
    62                                          ;-----------------------------------
    63 00000099 426F6F74696E672E2E-     .s0     db  "Booting...", 0x0A, 0x0D, 0
    63 000000A2 2E0A0D00           
    64 000000A6 4572726F723A736563-     .e0     db  "Error:sector read", 0
    64 000000AF 746F72207265616400 
    65                                  
    66                                  ;********************************************
    67                                  ; ブートドライブに関する情報
    68                                  ;********************************************
    69                                  ALIGN 2, db 0
    70                                  BOOT:                                           ; ブートドライブに関する情報
    71                                          istruc  drive
    72 000000B8 0000                                at  drive.no,       dw 0            ; ドライブ番号
    73 000000BA 0000                                at  drive.cyln,     dw 0            ; C:シリンダ
    74 000000BC 0000                                at  drive.head,     dw 0            ; H:ヘッド
    75 000000BE 0200                                at  drive.sect,     dw 2            ; S:セクタ
    76                                          iend
    77                                  
    78                                  ;********************************************
    79                                  ; モジュール
    80                                  ;********************************************
    81                                  %include    "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1>         ;-------------------------------
     3                              <1>         ;【スタックフレームの構築】
     4                              <1>         ;-------------------------------
     5                              <1>                                         ;   + 4| 出力文字
     6                              <1>                                         ;   + 2| IP(戻り番地)
     7 000000C0 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
     8 000000C1 89E5                <1>         mov     bp, sp                  ;------+---------
     9                              <1> 
    10                              <1>         ;-------------------------------
    11                              <1>         ;【レジスタの保存】
    12                              <1>         ;-------------------------------
    13 000000C3 50                  <1>         push    ax
    14 000000C4 53                  <1>         push    bx
    15 000000C5 56                  <1>         push    si
    16                              <1> 
    17                              <1>         ;-------------------------------
    18                              <1>         ; 引数を取得
    19                              <1>         ;-------------------------------
    20 000000C6 8B7604              <1>         mov     si, [bp + 4]            ; SI = 文字列へのアドレス;
    21                              <1>         
    22                              <1>         ;-------------------------------
    23                              <1>         ;【処理の開始】
    24                              <1>         ;-------------------------------
    25 000000C9 B40E                <1>         mov     ah, 0x0E                ; // テレタイプ式1文字出力
    26 000000CB BB0000              <1>         mov     bx, 0x0000              ; // ページ番号と文字色を0に設定
    27 000000CE FC                  <1>         cld                             ; DF = 0; // アドレス加算
    28                              <1> .10L:                                   ; do
    29                              <1>                                         ; {
    30 000000CF AC                  <1>         lodsb                           ;   AL = *SI++;
    31                              <1>                                         ;
    32 000000D0 3C00                <1>         cmp     al, 0                   ;   if (0 == AI)
    33 000000D2 7404                <1>         je      .10E                    ;       break;
    34                              <1>                                         ;
    35 000000D4 CD10                <1>         int     0x10                    ;   Int10(0x0E, AL); // 文字出力
    36 000000D6 EBF7                <1>         jmp     .10L                    ;
    37                              <1> .10E:                                   ; } while(1);        
    38                              <1>         
    39                              <1>         ;-------------------------------
    40                              <1>         ;【レジスタの復帰】
    41                              <1>         ;-------------------------------
    42 000000D8 5E                  <1>         pop     si
    43 000000D9 5B                  <1>         pop     bx
    44 000000DA 58                  <1>         pop     ax
    45                              <1> 
    46                              <1>         ;-------------------------------
    47                              <1>         ;【スタックフレームの破棄】
    48                              <1>         ;-------------------------------
    49 000000DB 89EC                <1>         mov     sp, bp
    50 000000DD 5D                  <1>         pop     bp
    51                              <1>         
    52 000000DE C3                  <1>         ret
    82                                  %include    "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1>         ;-------------------------------
     3                              <1>         ; メッセージを表示
     4                              <1>         ;-------------------------------
     5 000000DF 68[FB00]E8DBFF83C4- <1>         cdecl   puts, .s0
     5 000000E7 02                  <1>
     6                              <1> 
     7                              <1>         ;-------------------------------
     8                              <1>         ; キー入力待ち
     9                              <1>         ;-------------------------------
    10                              <1> .10L:                                   ; do
    11                              <1>                                         ; {
    12 000000E8 B410                <1>         mov     ah, 0x10                ;   // キー入力待ち
    13 000000EA CD16                <1>         int     0x016                   ;   AL = BIOS(0x16, 0x10);
    14                              <1>                                         ;
    15 000000EC 3C20                <1>         cmp     al, ' '                 ;   ZF = AL == ' ';
    16 000000EE 75F8                <1>         jne     .10L                    ; } while (!ZF);
    17                              <1> 
    18                              <1>         ;-------------------------------
    19                              <1>         ; 改行を出力
    20                              <1>         ;-------------------------------
    21 000000F0 68[1901]E8CAFF83C4- <1>         cdecl   puts, .s1               ; 改行
    21 000000F8 02                  <1>
    22                              <1>         
    23                              <1>         ;-------------------------------
    24                              <1>         ; 再起動
    25                              <1>         ;-------------------------------
    26 000000F9 CD19                <1>         int     0x19                    ; BIOS(0x19);   // reboot()     
    27                              <1>         
    28                              <1>         ;-------------------------------
    29                              <1>         ; 文字列データ
    30                              <1>         ;-------------------------------
    31 000000FB 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    31 00000104 414345206B65792074- <1>
    31 0000010D 6F207265626F6F742E- <1>
    31 00000116 2E2E00              <1>
    32 00000119 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    33                              <1>         
    83                                  %include    "../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1>         ;-------------------------------
     3                              <1>         ;【スタックフレームの構築】
     4                              <1>         ;-------------------------------
     5                              <1>                                         ;   + 8| コピー先
     6                              <1>                                         ;   + 6| セクタ数
     7                              <1>                                         ;   + 4| パラメータバッファ
     8                              <1>                                         ;------+---------
     9                              <1>                                         ;   + 2| IP(戻り番地)
    10 0000011E 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
    11 0000011F 89E5                <1>         mov     bp, sp                  ;------+---------
    12 00000121 6A03                <1>         push    3                       ;   - 2| retry = 3; // リトライ回数
    13 00000123 6A00                <1>         push    0                       ;   - 4| sect  = 0; // 読み込みセクタ数
    14                              <1> 
    15                              <1>         ;-------------------------------
    16                              <1>         ;【レジスタの保存】
    17                              <1>         ;-------------------------------
    18 00000125 53                  <1>         push    bx
    19 00000126 51                  <1>         push    cx
    20 00000127 52                  <1>         push    dx
    21 00000128 06                  <1>         push    es
    22 00000129 56                  <1>         push    si
    23                              <1>         
    24                              <1>         ;-------------------------------
    25                              <1>         ;【処理の開始】
    26                              <1>         ;-------------------------------
    27 0000012A 8B7604              <1>         mov     si, [bp + 4]            ; SI = SRCバッファ;
    28                              <1> 
    29                              <1>         ;-------------------------------
    30                              <1>         ; CXレジスタの設定
    31                              <1>         ; (BIOSコールの呼び出しに適した形に変換)
    32                              <1>         ;-------------------------------
    33 0000012D 8A6C02              <1>         mov     ch, [si + drive.cyln + 0]   ; CH   = シリンダ番号(下位バイト)
    34 00000130 8A4C03              <1>         mov     cl, [si + drive.cyln + 1]   ; CL   = シリンダ番号(上位バイト)
    35 00000133 C0E106              <1>         shl     cl, 6                       ; CL <<= 6; // 最上位2ビットにシフト
    36 00000136 0A4C06              <1>         or      cl, [si + drive.sect]       ; CL  |= セクタ番号;
    37                              <1> 
    38                              <1>         ;-------------------------------
    39                              <1>         ; セクタ読み込み
    40                              <1>         ;-------------------------------
    41 00000139 8A7404              <1>         mov     dh, [si + drive.head]   ; DH = ヘッド番号;
    42 0000013C 8A14                <1>         mov     dl, [si + 0]            ; DL = ドライブ番号;
    43 0000013E B80000              <1>         mov     ax, 0x0000              ; AX = 0x0000;
    44 00000141 8EC0                <1>         mov     es, ax                  ; ES = セグメント
    45 00000143 8B5E08              <1>         mov     bx, [bp + 8]            ; BX = コピー先;
    46                              <1> .10L:                                   ; do
    47                              <1>                                         ; {
    48 00000146 B402                <1>         mov     ah, 0x02                ;   AH = セクタ読み込み
    49 00000148 8A4606              <1>         mov     al, [bp + 6]            ;   AL = セクタ数
    50                              <1>                                         ;
    51 0000014B CD13                <1>         int     0x13                    ;   CF = BIOS(0x13, 0x02);
    52 0000014D 7304                <1>         jnc     .11E                    ;   if (CF)
    53                              <1>                                         ;   {
    54 0000014F B000                <1>         mov     al, 0                   ;     AL = 0;
    55 00000151 EB0C                <1>         jmp     .10E                    ;     break;
    56                              <1> .11E:                                   ;   }
    57                              <1>                                         ;
    58 00000153 3C00                <1>         cmp     al, 0                   ;   if (読み込んだセクタがあれば)
    59 00000155 7508                <1>         jne     .10E                    ;     break;
    60                              <1>                                         ;
    61 00000157 B80000              <1>         mov     ax, 0                   ;   ret = 0; // 戻り値を設定
    62 0000015A FF4EFE              <1>         dec     word [bp - 2]           ; }
    63 0000015D 75E7                <1>         jnz     .10L                    ; while (--retry);
    64                              <1> .10E:
    65 0000015F B400                <1>         mov     ah, 0                   ; AH = 0; // ステータス情報は破棄
    66                              <1> 
    67                              <1>         ;-------------------------------
    68                              <1>         ;【レジスタの復帰】
    69                              <1>         ;-------------------------------
    70 00000161 5E                  <1>         pop     si
    71 00000162 07                  <1>         pop     es
    72 00000163 5A                  <1>         pop     dx
    73 00000164 59                  <1>         pop     cx
    74 00000165 5B                  <1>         pop     bx
    75                              <1> 
    76                              <1>         ;-------------------------------
    77                              <1>         ;【スタックフレームの破棄】
    78                              <1>         ;-------------------------------
    79 00000166 89EC                <1>         mov     sp, bp
    80 00000168 5D                  <1>         pop     bp
    81                              <1>         
    82 00000169 C3                  <1>         ret
    84                                  
    85                                  ;********************************************
    86                                  ; ブートフラグ(先頭512バイトの終了)
    87                                  ;********************************************
    88 0000016A 00<rept>                    times   510 - ($ - $$) db 0x00
    89 000001FE 55AA                        db  0x55, 0xAA
    90                                  
    91                                  ;********************************************
    92                                  ; リアルモード時に取得した情報
    93                                  ;********************************************
    94                                  FONT:                                           ; フォント
    95 00000200 0000                    .seg:   dw 0
    96 00000202 0000                    .off:   dw 0
    97                                  
    98                                  ;********************************************
    99                                  ; モジュール(先頭512バイト以降に配置)
   100                                  ;********************************************
   101                                  %include    "../modules/real/itoa.s"
     1                              <1> itoa:
     2                              <1>         ;-------------------------------
     3                              <1>         ;【スタックフレームの構築】
     4                              <1>         ;-------------------------------
     5                              <1>                                         ;   +12| フラグ
     6                              <1>                                         ;   +10| 基数
     7                              <1>                                         ;   + 8| バッファサイズ
     8                              <1>                                         ;   + 6| バッファアドレス
     9                              <1>                                         ;   + 4| 数値
    10                              <1>                                         ;   + 2| IP(戻り番地)
    11 00000204 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
    12 00000205 89E5                <1>         mov     bp, sp                  ;------+---------
    13                              <1> 
    14                              <1>         ;-------------------------------
    15                              <1>         ;【レジスタの保存】
    16                              <1>         ;-------------------------------
    17 00000207 50                  <1>         push    ax
    18 00000208 53                  <1>         push    bx
    19 00000209 51                  <1>         push    cx
    20 0000020A 52                  <1>         push    dx
    21 0000020B 56                  <1>         push    si
    22 0000020C 57                  <1>         push    di
    23                              <1> 
    24                              <1>         ;-------------------------------
    25                              <1>         ; 引数を取得
    26                              <1>         ;-------------------------------
    27 0000020D 8B4604              <1>         mov     ax, [bp + 4]            ; val   = 数値
    28 00000210 8B7606              <1>         mov     si, [bp + 6]            ; dst   = バッファアドレス;
    29 00000213 8B4E08              <1>         mov     cx, [bp + 8]            ; size  = 残りのバッファサイズ
    30                              <1> 
    31 00000216 89F7                <1>         mov     di, si                  ; // バッファの最後尾
    32 00000218 01CF                <1>         add     di, cx                  ; dst   = &dst[size - 1];
    33 0000021A 4F                  <1>         dec     di                      ;
    34                              <1> 
    35 0000021B 8B5E0C              <1>         mov     bx, word [bp +12]       ; flags = オプション;
    36                              <1> 
    37                              <1>         ;-------------------------------
    38                              <1>         ; 符号付き判定
    39                              <1>         ;-------------------------------
    40 0000021E F7C30100            <1>         test    bx, 0b0001              ; if (flags & 0x01)// 符号付き
    41 00000222 7408                <1> .10Q:   je      .10E                    ; {
    42 00000224 83F800              <1>         cmp     ax, 0                   ;   if (val < 0)
    43 00000227 7D03                <1> .12Q:   jge     .12E                    ;   {
    44 00000229 83CB02              <1>         or      bx, 0b0010              ;      flags |= 2; // 符号表示
    45                              <1> .12E:                                   ;   }
    46                              <1> .10E:                                   ; }
    47                              <1> 
    48                              <1>         ;-------------------------------
    49                              <1>         ; 符号出力判定
    50                              <1>         ;-------------------------------
    51 0000022C F7C30200            <1>         test    bx, 0b0010              ; if (flags & 0x02)// 符号出力判定
    52 00000230 7410                <1> .20Q:   je      .20E                    ; {
    53 00000232 83F800              <1>         cmp     ax, 0                   ;   if (val < 0)
    54 00000235 7D07                <1> .22Q:   jge     .22F                    ;   {
    55 00000237 F7D8                <1>         neg     ax                      ;      val *= -1   // 符号反転
    56 00000239 C6042D              <1>         mov     [si], byte '-'          ;      *dst = '-'; // 符号表示
    57 0000023C EB03                <1>         jmp     .22E                    ;   }
    58                              <1> .22F:                                   ;   else
    59                              <1>                                         ;   {
    60 0000023E C6042B              <1>         mov     [si], byte '+'          ;      *dst = '+'; // 符号表示
    61                              <1> .22E:                                   ;   }
    62 00000241 49                  <1>         dec     cx                      ;   size--;        // 残りバッファサイズの減算
    63                              <1> .20E:                                   ; }
    64                              <1> 
    65                              <1>         ;-------------------------------
    66                              <1>         ; ASCII変換
    67                              <1>         ;-------------------------------
    68 00000242 8B5E0A              <1>         mov     bx, [bp +10]            ; BX = 基数;
    69                              <1> .30L:                                   ; do
    70 00000245 BA0000              <1>         mov     dx, 0                   ; {
    71 00000248 F7F3                <1>         div     bx                      ;
    72                              <1>                                         ;       DX = DX:AX % 基数;
    73                              <1>                                         ;       AX = DX:AX / 基数;
    74                              <1>                                         ;
    75 0000024A 89D6                <1>         mov     si, dx                  ;       // テーブル参照
    76 0000024C 8A94[7402]          <1>         mov     dl, byte [.ascii + si]  ;       DL = ASCII[DX];
    77                              <1>                                         ;
    78 00000250 8815                <1>         mov     [di], DL                ;       *dst = DL;
    79 00000252 4F                  <1>         dec     di                      ;       dst--;
    80                              <1>                                         ;
    81 00000253 83F800              <1>         cmp     ax, 0                   ;
    82 00000256 E0ED                <1>         loopnz  .30L                    ; } while (AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;-------------------------------
    86                              <1>         ; 空欄を埋める
    87                              <1>         ;-------------------------------
    88 00000258 83F900              <1>         cmp     cx, 0                   ; if (size)
    89 0000025B 740D                <1> .40Q:   je      .40E                    ; {
    90 0000025D B020                <1>         mov     al, ' '                 ;   AL = ' '; // ' 'で埋める（デフォルト値）
    91 0000025F 837E0C04            <1>         cmp     [bp +12], word 0b0100   ;   if (flags & 0x04)
    92 00000263 7502                <1> .42Q:   jne     .42E                    ;   {
    93 00000265 B030                <1>         mov     al, '0'                 ;     AL = '0'; // '0'で埋める
    94                              <1> .42E:                                   ;   }
    95 00000267 FD                  <1>         std                             ;   // DF = 1（-方向）
    96 00000268 F3AA                <1>         rep stosb                       ;   while (--CX) *DI-- = ' ';
    97                              <1> .40E:                                   ; }
    98                              <1> 
    99                              <1>         ;-------------------------------
   100                              <1>         ;【レジスタの復帰】
   101                              <1>         ;-------------------------------
   102 0000026A 5F                  <1>         pop     di
   103 0000026B 5E                  <1>         pop     si
   104 0000026C 5A                  <1>         pop     dx
   105 0000026D 59                  <1>         pop     cx
   106 0000026E 5B                  <1>         pop     bx
   107 0000026F 58                  <1>         pop     ax
   108                              <1> 
   109                              <1>         ;-------------------------------
   110                              <1>         ;【スタックフレームの破棄】
   111                              <1>         ;-------------------------------
   112 00000270 89EC                <1>         mov     sp, bp
   113 00000272 5D                  <1>         pop     bp
   114                              <1>         
   115 00000273 C3                  <1>         ret
   116 00000274 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"      ; 変換テーブル
   116 0000027D 39414243444546      <1>
   102                                  %include    "../modules/real/get_drive_param.s"
     1                              <1> get_drive_param:
     2                              <1>         ;-------------------------------
     3                              <1>         ;【スタックフレームの構築】
     4                              <1>         ;-------------------------------
     5                              <1>                                         ;   + 4| パラメータバッファ
     6                              <1>                                         ;   + 2| IP(戻り番地)
     7 00000284 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
     8 00000285 89E5                <1>         mov     bp, sp                  ;------+---------
     9                              <1> 
    10                              <1>         ;-------------------------------
    11                              <1>         ;【レジスタの保存】
    12                              <1>         ;-------------------------------
    13 00000287 53                  <1>         push    bx
    14 00000288 51                  <1>         push    cx
    15 00000289 06                  <1>         push    es
    16 0000028A 56                  <1>         push    si
    17 0000028B 57                  <1>         push    di
    18                              <1>         
    19                              <1>         ;-------------------------------
    20                              <1>         ;【処理の開始】
    21                              <1>         ;-------------------------------
    22 0000028C 8B7604              <1>         mov     si, [bp + 4]            ; SI = SRCバッファ;
    23                              <1> 
    24 0000028F B80000              <1>         mov     ax, 0                   ; Disk Base Table Pointerの初期化
    25 00000292 8EC0                <1>         mov     es, ax                  ; ES = 0;
    26 00000294 89C7                <1>         mov     di, ax                  ; DI = 0;
    27                              <1> 
    28 00000296 B408                <1>         mov     ah, 8                   ; // get drive parameters
    29 00000298 8A14                <1>         mov     dl, [si + drive.no]     ; DL = ドライブ番号
    30 0000029A CD13                <1>         int     0x13                    ; CF = BIOS(0x13, 8);
    31 0000029C 721B                <1> .10Q:   jc     .10F                     ; if (0 == CF)
    32                              <1> .10T:                                   ; {
    33 0000029E 88C8                <1>         mov     al, cl                  ;   AX = セクタ数
    34 000002A0 83E03F              <1>         and     ax, 0x3F                ;   // 下位6ビットのみ有効
    35                              <1> 
    36 000002A3 C0E906              <1>         shr     cl, 6                   ;   CX = シリンダ数
    37 000002A6 C1C908              <1>         ror     cx, 8                   ;
    38 000002A9 41                  <1>         inc     cx                      ;
    39                              <1> 
    40 000002AA 0FB6DE              <1>         movzx   bx, dh                  ;   BX = ヘッド数(1ベース)
    41 000002AD 43                  <1>         inc     bx                      ;
    42                              <1> 
    43 000002AE 894C02              <1>         mov     [si + drive.cyln], cx   ;   drive.cyln = CX; // C:シリンダ数
    44 000002B1 895C04              <1>         mov     [si + drive.head], bx   ;   drive.head = BX; // H:ヘッド数
    45 000002B4 894406              <1>         mov     [si + drive.sect], ax   ;   drive.sect = AX; // S:セクタ数
    46                              <1> 
    47 000002B7 EB03                <1>         jmp     .10E                    ; }
    48                              <1> .10F:                                   ; else
    49                              <1>                                         ; {
    50 000002B9 B80000              <1>         mov     ax, 0                   ;   AX = 0; // 失敗
    51                              <1> .10E:                                   ; }
    52                              <1> 
    53                              <1>         ;-------------------------------
    54                              <1>         ;【レジスタの復帰】
    55                              <1>         ;-------------------------------
    56 000002BC 5F                  <1>         pop     di
    57 000002BD 5E                  <1>         pop     si
    58 000002BE 07                  <1>         pop     es
    59 000002BF 59                  <1>         pop     cx
    60 000002C0 5B                  <1>         pop     bx
    61                              <1> 
    62                              <1>         ;-------------------------------
    63                              <1>         ;【スタックフレームの破棄】
    64                              <1>         ;-------------------------------
    65 000002C1 89EC                <1>         mov     sp, bp
    66 000002C3 5D                  <1>         pop     bp
    67                              <1>         
    68 000002C4 C3                  <1>         ret
   103                                  %include    "../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1>         ;-------------------------------
     3                              <1>         ;【スタックフレームの構築】
     4                              <1>         ;-------------------------------
     5                              <1>                                         ;   + 4| フォントアドレス格納位置
     6                              <1>                                         ;   + 2| IP(戻り番地)
     7 000002C5 55                  <1>         push    bp                      ; BP+ 0| BP(元の値)
     8 000002C6 89E5                <1>         mov     bp, sp                  ;------+---------
     9                              <1> 
    10                              <1>         ;-------------------------------
    11                              <1>         ;【レジスタの保存】
    12                              <1>         ;-------------------------------
    13 000002C8 50                  <1>         push    ax
    14 000002C9 53                  <1>         push    bx
    15 000002CA 56                  <1>         push    si
    16 000002CB 06                  <1>         push    es
    17 000002CC 55                  <1>         push    bp
    18                              <1> 
    19                              <1>         ;-------------------------------
    20                              <1>         ; 引数を取得
    21                              <1>         ;-------------------------------
    22 000002CD 8B7604              <1>         mov     si, [bp + 4]            ; dst = FONTアドレスの保存先;
    23                              <1> 
    24                              <1>         ;-------------------------------
    25                              <1>         ; フォントアドレスの取得
    26                              <1>         ;-------------------------------
    27 000002D0 B83011              <1>         mov     ax, 0x1130              ; // フォントアドレスの取得
    28 000002D3 B706                <1>         mov     bh, 0x06                ; 8x16 font (vga/mcga)
    29 000002D5 CD10                <1>         int     10h                     ; ES:BP=FONT ADDRESS
    30                              <1> 
    31                              <1>         ;-------------------------------
    32                              <1>         ; FONTアドレスを保存
    33                              <1>         ;-------------------------------
    34 000002D7 8C04                <1>         mov     [si + 0], es            ; dst[0] = セグメント;
    35 000002D9 896C02              <1>         mov     [si + 2], bp            ; dst[1] = オフセット;
    36                              <1> 
    37                              <1>         ;-------------------------------
    38                              <1>         ;【レジスタの復帰】
    39                              <1>         ;-------------------------------
    40 000002DC 5D                  <1>         pop     bp
    41 000002DD 07                  <1>         pop     es
    42 000002DE 5E                  <1>         pop     si
    43 000002DF 5B                  <1>         pop     bx
    44 000002E0 58                  <1>         pop     ax
    45                              <1> 
    46                              <1>         ;-------------------------------
    47                              <1>         ;【スタックフレームの破棄】
    48                              <1>         ;-------------------------------
    49 000002E1 89EC                <1>         mov     sp, bp
    50 000002E3 5D                  <1>         pop     bp
    51                              <1>         
    52 000002E4 C3                  <1>         ret
   104                                  
   105                                  ;********************************************
   106                                  ; ブート処理の第2ステージ
   107                                  ;********************************************
   108                                  stage_2:
   109                                          ;-----------------------------------
   110                                          ; 文字列を表示
   111                                          ;-----------------------------------
   112 000002E5 68[5F03]E8D5FD83C4-             cdecl   puts,   .s0                     ; puts(.s0);
   112 000002ED 02                 
   113                                  
   114                                          ;-----------------------------------
   115                                          ; ドライブ情報を取得
   116                                          ;-----------------------------------
   117 000002EE 68[B800]E890FF83C4-             cdecl   get_drive_param, BOOT           ; get_drive_param(DX, BOOT.CYLN);
   117 000002F6 02                 
   118 000002F7 83F800                          cmp     ax, 0                           ; if (0 == AX)
   119 000002FA 750C                    .10Q:   jne     .10E                            ; {
   120 000002FC 68[9603]E8BEFD83C4-     .10T:   cdecl   puts, .e0                       ;   puts(.e0);
   120 00000304 02                 
   121 00000305 E8D7FD                          call    reboot                          ;   reboot(); // 再起動
   122                                  .10E:                                           ; }
   123                                  
   124                                          ;-----------------------------------
   125                                          ; ドライブ情報を表示
   126                                          ;-----------------------------------
   127 00000308 A1[B800]                        mov     ax, [BOOT + drive.no]           ; AX = ブートドライブ;
   128 0000030B 6A046A106A0268-                 cdecl   itoa, ax, .p1, 2, 16, 0b0100    ;
   128 00000312 [7703]50E8ECFE83C4-
   128 0000031A 0A                 
   129 0000031B A1[BA00]                        mov     ax, [BOOT + drive.cyln]         ;
   130 0000031E 6A046A106A0468-                 cdecl   itoa, ax, .p2, 4, 16, 0b0100    ;
   130 00000325 [7F03]50E8D9FE83C4-
   130 0000032D 0A                 
   131 0000032E A1[BC00]                        mov     ax, [BOOT + drive.head]         ; AX = ヘッド数;
   132 00000331 6A046A106A0268-                 cdecl   itoa, ax, .p3, 2, 16, 0b0100    ;
   132 00000338 [8903]50E8C6FE83C4-
   132 00000340 0A                 
   133 00000341 A1[BE00]                        mov     ax, [BOOT + drive.sect]         ; AX = トラックあたりのセクタ数;
   134 00000344 6A046A106A0268-                 cdecl   itoa, ax, .p4, 2, 16, 0b0100    ;
   134 0000034B [9103]50E8B3FE83C4-
   134 00000353 0A                 
   135 00000354 68[6E03]E866FD83C4-             cdecl   puts, .s1
   135 0000035C 02                 
   136                                  
   137                                          ;-----------------------------------
   138                                          ; 次のステージへ移行
   139                                          ;-----------------------------------
   140 0000035D EB52                            jmp     stage_3rd                       ; ブート処理の第2ステージ
   141                                  
   142                                          ;-----------------------------------
   143                                          ; データ
   144                                          ;-----------------------------------
   145 0000035F 326E64207374616765-     .s0     db  "2nd stage...", 0x0A, 0x0D, 0
   145 00000368 2E2E2E0A0D00       
   146                                  
   147 0000036E 2044726976653A3078      .s1     db " Drive:0x"
   148 00000377 20202C20433A3078        .p1     db "  , C:0x"
   149 0000037F 202020202C20483A30-     .p2     db "    , H:0x"
   149 00000388 78                 
   150 00000389 20202C20533A3078        .p3     db "  , S:0x"
   151 00000391 20200A0D00              .p4     db "  ", 0x0A, 0x0D, 0
   152                                  
   153 00000396 43616E277420676574-     .e0     db "Can't get drive parameter.", 0
   153 0000039F 206472697665207061-
   153 000003A8 72616D657465722E00 
   154                                  
   155                                  ;********************************************
   156                                  ; ブート処理の第3ステージ
   157                                  ;********************************************
   158                                  stage_3rd:
   159                                          ;-----------------------------------
   160                                          ; 文字列を表示
   161                                          ;-----------------------------------
   162 000003B1 68[F403]E809FD83C4-             cdecl   puts,   .s0                     ; puts(.s0);
   162 000003B9 02                 
   163                                  
   164                                          ;-----------------------------------
   165                                          ; プロテクトモードで使用するフォントは、
   166                                          ; BIOSに内蔵されたものを流用する
   167                                          ;-----------------------------------
   168 000003BA 68[0002]E805FF83C4-             cdecl   get_font_adr, FONT              ; // BIOSのフォントアドレスを取得
   168 000003C2 02                 
   169                                  
   170                                          ;-----------------------------------
   171                                          ; フォントアドレスの表示
   172                                          ;-----------------------------------
   173 000003C3 6A046A106A0468-                 cdecl   itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   173 000003CA [1104]FF36[0002]E8-
   173 000003D1 31FE83C40A         
   174 000003D6 6A046A106A0468-                 cdecl   itoa, word [FONT.off], .p2, 4, 16, 0b0100
   174 000003DD [1604]FF36[0202]E8-
   174 000003E4 1EFE83C40A         
   175 000003E9 68[0304]E8D1FC83C4-             cdecl   puts, .s1
   175 000003F1 02                 
   176                                  
   177                                          ;-----------------------------------
   178                                          ; 処理の終了
   179                                          ;-----------------------------------
   180 000003F2 EBFE                            jmp     $                               ; while (1); // 無限ループ
   181                                  
   182                                          ;-----------------------------------
   183                                          ; データ
   184                                          ;-----------------------------------
   185 000003F4 337264207374616765-     .s0     db  "3rd stage...", 0x0A, 0x0D, 0
   185 000003FD 2E2E2E0A0D00       
   186                                  
   187 00000403 20466F6E7420416464-     .s1     db " Font Address="
   187 0000040C 726573733D         
   188 00000411 5A5A5A5A3A              .p1     db "ZZZZ:"
   189 00000416 5A5A5A5A0A0D00          .p2     db "ZZZZ", 0x0A, 0x0D, 0
   190 0000041D 0A0D00                          db 0x0A, 0x0D, 0
   191                                  
   192                                  ;********************************************
   193                                  ; パディング
   194                                  ;********************************************
   195 00000420 00<rept>                        times BOOT_SIZE - ($ - $$)     db  0   ; パディング
